from pymongo import MongoClient
import csv
from packaging import version
from util import config
import os


client = MongoClient('localhost', 27017)
db = client['lib_vul_db']


def generate_func_list_for_rest(ven, fw, fw_ver, lib, lib_ver):
    collection = db[lib]
    build_version = {lib_ver}

    dir_ven = 'IDA/func_list_' + ven + '/'
    if not os.path.isdir(dir_ven):
        os.makedirs(dir_ven)
    with open(dir_ven + lib + '_' + fw + '_' + fw_ver + '_func_list.csv', 'w') as f:
        wr = csv.writer(f)
        for doc in collection.find():
            if 'affected_since_version' in doc.keys() and version.parse(lib_ver) < version.parse(doc['affected_since_version']):
                print('skip', doc['CVE'], '(affecting since', doc['affected_since_version'], ')')
                continue

            if doc['fixed_version'] != 'master' and version.parse(lib_ver) >= version.parse(doc['fixed_version']):
                print('skip', doc['CVE'], '(fixed in', doc['fixed_version'], ')')
                continue
            
            if 'function_name' not in doc.keys():
                print('error', doc['CVE'], 'has no function name')
            else:
                cnt = 0
                if 'update_function_name' in doc.keys():
                    for update_func in doc['update_function_name']:
                        cnt += 1
                        print(doc['CVE'], doc['fixed_version'], update_func)
                        wr.writerow([doc['CVE'], doc['fixed_version'], update_func])
                else:
                    for func in doc['function_name']:
                        cnt += 1
                        print(doc['CVE'], doc['fixed_version'], func)
                        wr.writerow([doc['CVE'], doc['fixed_version'], func])
                if cnt > 0:
                    build_version.add(doc['fixed_version'])

    print(lib, list(build_version))


def generate_func_list_for_openssl(ven, fw, fw_ver, lib, lib_ver):
    if lib_ver[0] == '1':
        collection = db[lib + '_' + lib_ver[:-1]]
    elif lib_ver[0] == '3':
        collection = db[lib + '_' + lib_ver.rsplit('.', 1)[0]]
    build_version = {lib_ver}

    dir_ven = 'IDA/func_list_' + ven + '/'
    if not os.path.isdir(dir_ven):
        os.makedirs(dir_ven)
    with open(dir_ven + lib + '_' + fw + '_' + fw_ver + '_func_list.csv', 'w') as f:
        wr = csv.writer(f)
        for doc in collection.find():
            if 'affected_since_version' in doc.keys():
                if lib_ver[0] == '3' and version.parse(lib_ver) < version.parse(doc['affected_since_version']):
                    print('skip', doc['CVE'], '(affecting since', doc['affected_since_version'], ')')
                    continue
                elif lib_ver[0] == '1' and lib_ver < doc['affected_since_version']:
                    print('skip', doc['CVE'], '(affecting since', doc['affected_since_version'], ')')
                    continue

            if lib_ver[0] == '3' and version.parse(lib_ver) >= version.parse(doc['fixed_version']):
                print('skip', doc['CVE'], '(fixed in', doc['fixed_version'], ')')
                continue
            elif lib_ver[0] == '1' and lib_ver >= doc['fixed_version']:
                print('skip', doc['CVE'], '(fixed in', doc['fixed_version'], ')')
                continue
            
            if 'function_name' not in doc.keys():
                print('error', doc['CVE'], 'has no function name')
            else:
                cnt = 0
                if 'update_function_name' in doc.keys():
                    for update_func in doc['update_function_name']:
                        cnt += 1
                        print(doc['CVE'], doc['fixed_version'], update_func)
                        wr.writerow([doc['CVE'], doc['fixed_version'], update_func])
                else:
                    for func in doc['function_name']:
                        cnt += 1
                        print(doc['CVE'], doc['fixed_version'], func)
                        wr.writerow([doc['CVE'], doc['fixed_version'], func])
                if cnt > 0:
                    build_version.add(doc['fixed_version'])

    # print(lib, list(build_version))


def generate_func_lib(ven, fw, fw_ver, lib, func_lib):
    func_set = set()
    with open('IDA/func_list_' + ven + '/' + lib + '_' + fw + '_' + fw_ver + '_func_list.csv', 'r') as f:
        lines = f.readlines()
        for line in lines:
            line = line[:-1].split(',')
            func_set.add(line[-1])
    # print(len(func_set))
    dir_func_lib = 'IDA/func_lib/' + lib + '/'
    if not os.path.isdir(dir_func_lib):
        os.makedirs(dir_func_lib)
    with open(dir_func_lib + ven + '_' + fw + '_' + fw_ver + '.csv', 'w') as f:
        wr = csv.writer(f)
        wr.writerow(['function', 'lib', 'name'])
        for func in func_set:
            wr.writerow([func, func_lib, func])


lib_list = [
    'curl',
    'dbus',
    'dnsmasq',
    'e2fsprogs',
    'expat',
    'libarchive',
    'libgcrypt',
    'libmodbus',
    'libpcap',
    'libssh2',
    'libtirpc',
    'libxml2',
    'mosquitto',
    'ncurses',
    'openssh',
    'openssl',
    'perl',
    'util-linux',
    'zlib'
]

test_lib = 'libexpat'

with open('fw_lib_list.csv', 'r') as f:
    lines = f.readlines()

for line in lines:
    line = line[:-1].split(',')
    config.ven = line[0]
    config.fw = line[1]
    config.fw_ver = line[2]
    config.lib = line[3]
    config.lib_ver = line[4]
    
    if config.lib != test_lib:
        continue
    print(line)

    if config.lib == 'openssl':
        generate_func_list_for_openssl(config.ven, config.fw, config.fw_ver, config.lib, config.lib_ver)
    elif config.lib in lib_list:
        generate_func_list_for_rest(config.ven, config.fw, config.fw_ver, config.lib, config.lib_ver)
    else:
        print('no', config.lib, 'found in CVE database')
        exit(1)

    generate_func_lib(config.ven, config.fw, config.fw_ver, config.lib, 'e2fsck')